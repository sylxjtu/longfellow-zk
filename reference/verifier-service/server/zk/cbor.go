// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains the functions that parse and prepare the proof request
// for validation:
//
//  1. ZKDeviceResponse CBOR structure is parsed and validated, see the description
//     of the format below.
//  2. The signing certificate is validated against the set of trusted CA certificates
//  3. All arguments required to execute run_mdoc_verifier from Longfellow ZK library
//     are prepared (see VerifyRequest format)
//
// The ZKDeviceResponse generated by Google Wallet is following a "preview version" of
// the ISO 18013-5 Second Edition ZKDocument. It has the following structure:
//
// ZkDeviceResponse
//
//	└── zkDocuments : [ZkDocument]+
//	    │ └── ZkDocument
//	    │ │ ├── docType : DocType
//	    │ │ ├── zkSystemType: ZkSpec
//	    │ │ │ └── ZkSpec
//	    │ │ │ ├── system : string
//	    │ │ │ └── params : ZkParams
//	    | │ │ │ └── ZkParams
//	    | │ │ │ ├── version : uint
//	    | │ │ │ └── circuitHash : string
//	    | │ │ │ └── numAttributes : uint
//	    │ │ ├── timestamp : full-date
//	    │ │ ├── ? issuerSigned : NameSpace => [ZkSignedItem]+
//	    │ │ │ └── ZkSignedItem
//	    │ │ │ ├── elementIdentifier : DataElementIdentifier
//	    │ │ │ └── elementValue : DataElementValue
//	    │ │ └── ? msoX5chain : COSE_X509
//	    │ └── proof : bstr
//
// For more information about CBOR, COSE and other standards see
// https://github.com/ISOWG10/ISO-18013/tree/main/Working%20Documents
package zk

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/x509"
	"encoding/hex"
	"encoding/pem"
	"errors"
	"fmt"
	"log"

	"github.com/fxamacker/cbor/v2"
)

var (
	// IssuerRoots is a pool of trusted root certificate authorities.
	IssuerRoots = x509.NewCertPool()
)

// X5ChainIndex is the index of the x509 chain in the COSE_Sign1 unprotected header.
const X5ChainIndex = 33

type zkSpec struct {
	System string
	Params zkParam
}

type zkParam struct {
	Version       uint
	CircuitHash   string
	NumAttributes uint
}

// IssuerSigned represents the claims signed by the issuer.
type IssuerSigned map[string][]zkSignedItem

type zkSignedItem struct {
	ElementIdentifier string
	ElementValue      cbor.RawMessage
}

type zkDocument struct {
	DocType      string
	ZKSystemType zkSpec
	IssuerSigned IssuerSigned
	MsoX5chain   chainCoseSign1
	Timestamp    string
	Proof        []byte
}

type zkDeviceResponse struct {
	Version     string
	ZKDocuments [][]byte
	Status      uint
}

type chainCoseSign1 struct {
	_           struct{} `cbor:",toarray"`
	Protected   string
	Unprotected map[int][]byte
	Payload     string
	Signature   string
}

// LoadIssuerRootCA loads a set of PEM-encoded root CA certificates into the IssuerRoots pool.
func LoadIssuerRootCA(rootPem []byte) error {
	for len(rootPem) > 0 {
		block, rest := pem.Decode(rootPem)
		if block == nil {
			break
		}
		if block.Type == "CERTIFICATE" {
			cert, err := x509.ParseCertificate(block.Bytes)
			if err != nil {
				return fmt.Errorf("failed to parse certificate: %w", err)
			}
			log.Printf("adding Issuer CA %s", cert.Subject)
			IssuerRoots.AddCert(cert)
		}
		rootPem = rest
	}
	return nil
}

// ProcessDeviceResponse processes the CBOR-encoded device response and returns a VerifyRequest.
func ProcessDeviceResponse(b []byte) (*VerifyRequest, error) {
	var dr zkDeviceResponse
	if err := cbor.Unmarshal(b, &dr); err != nil {
		return nil, fmt.Errorf("failed to unmarshal device response: %w", err)
	}
	if len(dr.ZKDocuments) != 1 {
		return nil, fmt.Errorf("expected 1 zkdocument, got %d", len(dr.ZKDocuments))
	}

	var zkd zkDocument
	if err := cbor.Unmarshal(dr.ZKDocuments[0], &zkd); err != nil {
		return nil, fmt.Errorf("failed to unmarshal zkdocument: %w", err)
	}

	if err := validateRequest(&zkd); err != nil {
		return nil, err
	}

	pkx, pky, err := validateIssuerKey(&zkd)
	if err != nil {
		return nil, err
	}

	namespace, attrs, err := extractAttributes(&zkd)
	if err != nil {
		return nil, err
	}

	namespaceList, idList, cborValList := buildAttributeLists(namespace, attrs)

	return &VerifyRequest{
		System:                zkd.ZKSystemType.System,
		CircuitID:             zkd.ZKSystemType.Params.CircuitHash,
		Pkx:                   pkx,
		Pky:                   pky,
		Now:                   zkd.Timestamp,
		DocType:               zkd.DocType,
		AttributeNamespaceIDs: namespaceList,
		AttributeIDs:          idList,
		AttributeCborValues:   cborValList,
		Proof:                 zkd.Proof,
		Claims:                zkd.IssuerSigned,
	}, nil
}

func extractAttributes(zkd *zkDocument) (string, []zkSignedItem, error) {
	if len(zkd.IssuerSigned) != 1 {
		return "", nil, fmt.Errorf("expected 1 namespace, got %d", len(zkd.IssuerSigned))
	}

	var namespace string
	for k := range zkd.IssuerSigned {
		namespace = k
		break
	}

	attrs, ok := zkd.IssuerSigned[namespace]
	if !ok {
		return "", nil, fmt.Errorf("cannot extract attributes from namespace %s", namespace)
	}
	return namespace, attrs, nil
}

func buildAttributeLists(namespace string, attrs []zkSignedItem) ([]string, []string, [][]byte) {
	namespaceList := make([]string, len(attrs))
	idList := make([]string, len(attrs))
	cborValList := make([][]byte, len(attrs))
	for i, attr := range attrs {
		namespaceList[i] = namespace
		idList[i] = attr.ElementIdentifier
		cborValList[i] = attr.ElementValue
	}
	return namespaceList, idList, cborValList
}

func validateRequest(doc *zkDocument) error {
	if doc.ZKSystemType.System != LONGFELLOW_V1 {
		return fmt.Errorf("incorrect system: got %s, want %s", doc.ZKSystemType.System, LONGFELLOW_V1)
	}
	if len(doc.ZKSystemType.Params.CircuitHash) != 64 {
		return fmt.Errorf("invalid circuit_hash length: got %d, want 64", len(doc.ZKSystemType.Params.CircuitHash))
	}
	if doc.ZKSystemType.Params.NumAttributes < 1 || doc.ZKSystemType.Params.NumAttributes > 4 {
		return fmt.Errorf("invalid num_attributes: got %d, want 1-4", doc.ZKSystemType.Params.NumAttributes)
	}
	if len(doc.Timestamp) != TIMESTAMP_LEN {
		return fmt.Errorf("invalid timestamp length: got %d, want %d", len(doc.Timestamp), TIMESTAMP_LEN)
	}
	if len(doc.Proof) == 0 {
		return errors.New("proof is empty")
	}
	if len(doc.DocType) == 0 {
		return errors.New("doctype is empty")
	}

	return nil
}

// Validate the issuer key by checking the following properties:
//  1. The msoX5chain can be parsed into a sequence of x509 certs
//  2. The first cert, i.e., the signer's cert, uses ECDSA keys with P256
//  3. The certificate chain verifies against the IssuerRoots.
func validateIssuerKey(zkd *zkDocument) (string, string, error) {
	if true {
		return "0xa8956b0eeb2865e27da5a14ba504e3cfcef922f00187137a0a615082327709c2", "0xbfae3d99e6ad8b14eef5975f2985a4b52e770e79cfc1bd394de065e2b1663553", nil
	}
	x509b, ok := zkd.MsoX5chain.Unprotected[X5ChainIndex]
	if !ok {
		return "", "", errors.New("x509 cert not found in unprotected header")
	}
	certs, err := x509.ParseCertificates(x509b)
	if err != nil {
		return "", "", fmt.Errorf("failed to parse certificates: %w", err)
	}
	if len(certs) < 1 {
		return "", "", errors.New("no certificates in x5chain")
	}

	signer := certs[0]

	if signer.PublicKeyAlgorithm != x509.ECDSA {
		return "", "", errors.New("only ECDSA signatures are supported")
	}

	ecdsaPK, ok := signer.PublicKey.(*ecdsa.PublicKey)
	if !ok || ecdsaPK.Curve != elliptic.P256() {
		return "", "", errors.New("signer public key is not ECDSA P256")
	}

	middle := x509.NewCertPool()
	for i := 1; i < len(certs); i++ {
		middle.AddCert(certs[i])
	}

	opts := x509.VerifyOptions{
		Intermediates: middle,
		Roots:         IssuerRoots,
		KeyUsages:     []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
	}

	if _, err := certs[0].Verify(opts); err != nil {
		for _, cert := range certs {
			log.Printf("cert subject: %v", cert.Subject)
		}
		return "", "", fmt.Errorf("failed to verify certificate chain: %w", err)
	}

	pkx := fmt.Sprintf("0x%s", hex.EncodeToString(ecdsaPK.X.Bytes()))
	pky := fmt.Sprintf("0x%s", hex.EncodeToString(ecdsaPK.Y.Bytes()))

	return pkx, pky, nil
}
